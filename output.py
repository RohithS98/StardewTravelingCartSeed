# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '..\test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import TravelingCartSeed
from PyQt5 import QtCore, QtWidgets
from pathlib import Path

## lineEdit_2   -> Start Seed
## lineEdit_3   -> End Seed
## lineEdit     -> Output File
## plainTextEdit -> Constraints
## textBrowser  -> Output

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Stardew Traveling Cart Seed Checker")
        Form.resize(649, 746)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 641, 51))
        self.label.setObjectName("label")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(10, 110, 171, 31))
        self.label_5.setObjectName("label_5")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(Form)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 140, 631, 361))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(10, 540, 171, 31))
        self.label_6.setObjectName("label_6")
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setGeometry(QtCore.QRect(10, 570, 631, 161))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(490, 510, 141, 31))
        self.pushButton.setStyleSheet("font: 75 12pt \"MS Shell Dlg 2\";")
        self.pushButton.setObjectName("pushButton")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(10, 80, 631, 22))
        self.widget.setObjectName("widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 0, 1, 1, 1)
        self.widget1 = QtWidgets.QWidget(Form)
        self.widget1.setGeometry(QtCore.QRect(10, 50, 631, 22))
        self.widget1.setObjectName("widget1")
        self.gridLayout = QtWidgets.QGridLayout(self.widget1)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.widget1)
        self.label_2.setMaximumSize(QtCore.QSize(141, 16777215))
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout.addWidget(self.lineEdit_2, 0, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.widget1)
        self.label_3.setMaximumSize(QtCore.QSize(31, 16777215))
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.gridLayout.addWidget(self.lineEdit_3, 0, 3, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


        self.pushButton.clicked.connect(self.getInputs)

    def validateConstraint(self, constraint):
        parts = constraint.split('/')
        if len(parts) in (3,4):
            itemList = []
            try:
                itemList = TravelingCartSeed.convertItemList(map(lambda x : x.strip(), parts[0].split(',')))
            except:
                return False, "Unrecognized item in list."
            
            start, end = parts[-2].strip(), parts[-1].strip()
            if not start.isnumeric():
                return False, "Start date only supports day number currently."
            if int(start) <= 0:
                return False, "Start date must be greater than 0."
            if not end.isnumeric():
                return False, "End date only supports day number currently."
            if int(end) <= 0:
                return False, "End date must be greater than 0."
            if int(start) > int(end):
                return False, "Start date must be less than end date."
            
            if len(parts) == 3:
                return True, TravelingCartSeed.Constraint(itemList, (int(start),int(end)))
            p2 = parts[1].strip()
            if not p2.isnumeric() or int(p2) <= 0:
                return False, "Partial constraint minimum must be a positive integer."
            p2 = int(p2)
            if p2 > len(itemList):
                return False, "Required number of items({0}) greater than number of listed items({1}).".format(p2, len(itemList))
            return True, TravelingCartSeed.PartConstr(itemList, (int(start),int(end)), p2)

        else:
            return False, "Incorrect constraint format."

    def validateInputs(self, start, end, op, constr):
        errors = []
        self.finalConstraints = []
        self.startSeed, self.endSeed, self.op = None, None, None
        try:
            self.startSeed = int(start)
        except:
            errors.append("Start seed " + start +" is not a valid seed.")
        try:
            self.endSeed = int(end)
        except:
            errors.append("End seed " + end +" is not a valid seed.")
        if self.endSeed and self.startSeed and (self.endSeed < self.startSeed):
            errors.append("Start seed is larger than the end seed.")
        if len(op) == 0:
            errors.append("Output File is empty.")
        self.op = op
        #Path(self.op).mkdir(parents=True, exist_ok=True)
        constrList = constr.split('\n')
        if len(constrList) == 0 or (len(constrList) == 1 and constrList[0] == ''):
            errors.append("No constraints found.")
        else:
            constrErr = []
            ind = 1
            for constraint in constrList:
                if constraint == '':
                    continue
                fl, ret = self.validateConstraint(constraint)
                if not fl:
                    constrErr.append("Constraint {0}: {1}".format(ind,ret))
                else:
                    self.finalConstraints.append(ret)
                ind += 1
            if len(constrErr) > 0:
                errors.append("Errors in {} constraints.".format(len(constrErr)))
                errors.extend(constrErr)
        return errors


    def formatErrors(self, errors):
        return "Found " + str(len(errors)) + " errors in arguments/constraints.\n" + '\n'.join(errors)

    def formatOPTest(self, startSeed,endSeed,outputFile,constraintPlainText):
        x = "Start Seed: " + startSeed + "\nEnd Seed: " + endSeed + "\nOutput File: " + outputFile + "\nConstraints:\n"+constraintPlainText
        return x
    
    def writeToFile(self, seed, days):
        with open(self.op,'a') as f:
            f.write("Seed "+str(seed)+"\n")
            for d in sorted(days.keys()):
                f.write("Day " + str(d) + ": " + str(days[d])+'\n')
            f.write('\n')
    
    def search(self):
        ns = 0
        for i in range(self.startSeed, self.endSeed+1):
            fl, ret = TravelingCartSeed.checkSeed(i,self.finalConstraints)
            if fl:
                self.writeToFile(i,ret)
                ns += 1
            for c in self.finalConstraints:
                c.reset()
        return ns
        

    def getInputs(self):
        startSeed = self.lineEdit_2.text()
        endSeed = self.lineEdit_3.text()
        outputFile = self.lineEdit.text()
        constraintPlainText = self.plainTextEdit.toPlainText()
        errors = self.validateInputs(startSeed, endSeed, outputFile, constraintPlainText)
        if errors == []:
            self.textBrowser.setText("Inputs validated. Searching for seeds")
            self.textBrowser.setText("Search complete. Found {} seed(s) matching constraints".format(self.search()))
        else:
            self.textBrowser.setText(self.formatErrors(errors))

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Stardew Traveling Cart Seed Checker", "Stardew Traveling Cart Seed Checker"))
        self.label.setText(_translate("Form", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Stardew Valley Traveling Cart Seed Checker v1</span></p></body></html>"))
        self.label_5.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Constraints:</span></p></body></html>"))
        self.plainTextEdit.setPlainText(_translate("Form", "Enter Constraints here"))
        self.label_6.setText(_translate("Form", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">Output:</span></p></body></html>"))
        self.pushButton.setText(_translate("Form", "Search"))
        self.label_4.setText(_translate("Form", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Output File:</span></p></body></html>"))
        self.label_2.setText(_translate("Form", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Seed Search Range:</span></p></body></html>"))
        self.label_3.setText(_translate("Form", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">To</span></p></body></html>"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
